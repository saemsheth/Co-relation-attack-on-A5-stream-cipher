# -*- coding: utf-8 -*-
"""Finding_cipher_key.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a_ydQwmXrzCV8F4GVzFh1mLt-zHkw4ni
"""

ai=[]
bi=[]
ci=[]
m1=[]
m2=[]
m3=[]
a=[]
b=[]
c1=[]
def LFSR1(x):
  for i in range(0,520):
      x3=x&1
      x = (x>>1)|(((x&1)^((x>>1)&1))<<6)
      ai.append(x3)

def LFSR2(x):
  for i in range(0,520):
      x3=x&1
      x = (x >> 1) | (((x & 1) ^ ((x >> 2) & 1) ^ ((x >> 3) &
      1) ^ ((x >> 4) & 1)) << 7)
      bi.append(x3)
def LFSR3(x):
  for i in range(0,520):
      x3=x&1
      x = (x >> 1) | (((x & 1) ^ ((x >> 4) & 1)) << 8)
      ci.append(x3)

def shift(seq, n):
  return seq[n:]+seq[:n]

def com1():
    c=0
    zi = [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0,
    1,1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1,1,0,
    1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0, 0, 0, 0, 1,
    0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,
    1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    1,
    1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
    1, 0, 1, 1, 1, 0, 1, 0, 1,
    0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0,
    1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,
    1,
    1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1,
    1, 0, 0, 1, 0, 0, 1, 0, 1,
    1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0,
    1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,
    0,
    0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0,
    1, 1, 0, 0, 0, 1, 0, 1, 1,
    0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1,
    0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0,
    1,
    1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0,
    0, 0, 0, 1, 1, 0, 1, 0, 1,
    0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,
    1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0,
    0,
    1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0,
    1, 0, 1, 1, 1, 0, 1, 0, 0,
    0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1,
    1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1,
    0,
    1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0,
    0, 1, 0, 1, 1, 1, 1, 0, 0,
    0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1,
    0,
    1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
    0, 0, 1, 1, 1, 1, 0, 1,0]

    for i in range(0,520):
        if(zi[i]==a[i]):
          c=c+1
    else:
        c=c-1
    
    return c


def com2():
    c=0
    zi = [0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1
    ,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0
    ,1,
    0,1,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,
    0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,0,1,0,
    1,
    0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,0,0,0,
    1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,0,
    1,
    1,1,1,1,0,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,1,
    0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,
    1,
    0,0,1,1,0,0,1,1,1,1,0,1,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,0,
    1,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,0,1,0,
    1,
    0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,
    1,1,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,
    0,
    0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,1,
    1,0,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,
    0,
    0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,
    1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,1,0,1,
    0]

    for i in range(0,520):
        if(zi[i]==b[i]):
            c=c+1
        else:
            c=c-1
    return c

def com3():
    c=0
    zi = [0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1
    ,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0
    ,1,
    0,1,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,
    0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,0,1,0,
    1,
    0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,0,0,0,
    1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,0,1,0,0,1,0,
    1,
    1,1,1,1,0,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,1,
    0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,
    1,
    0,0,1,1,0,0,1,1,1,1,0,1,0,1,1,0,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,0,
    1,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,0,1,0,
    1,
    0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,
    1,1,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,
    0,
    0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,1,0,0,0,0,1,
    1,0,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,1,0,1,1,1,1,0,
    0,
    0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1,0,
    1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,1,0,1,
    0]
    for i in range(0,520):
      if(zi[i]==c1[i]):
        c=c+1
      else:
        c=c-1
    return c


i1=int(input("Enter the initial state for LFSR1 in range(1,127)"))
i2=int(input("Enter the initial state for LFSR2 in range(1,255)"))
i3=int(input("Enter the initial state for LFSR3 in range(1,511)"))
LFSR1(i1)
LFSR2(i2)
LFSR3(i3)
for i in range(0,520):
    T1= i % 128
    a=shift(ai,T1)
    z1 = com1()
    m1.append(z1)
v1=max(m1)
max_index1=m1.index(v1)
k1=shift(ai,max_index1)
k1=shift(k1,128-64)
k1=k1[:7]

for i in range(0,520):
    T2= i % 256
    b=shift(bi,T2)
    z2 = com2()
    m2.append(z2)

v2=max(m2)
max_index2=m2.index(v2)
k2=shift(bi,max_index2)
k2= shift(k2,256-64)
k2=k2[:8]

for i in range(0,520):
    T3= i % 512
    c1=shift(ci,T3)
    z3 = com3()
    m3.append(z3)

v3=max(m3)
max_index3=m3.index(v3)
k3=shift(ci,max_index3)
k3= shift(k3,512-64)
k3=k3[:9]

print(k1)
print(k2)
print(k3)

